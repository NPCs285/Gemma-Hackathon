# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: transaction.sql
import decimal
from typing import AsyncIterator, Iterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from sql import models


GET_TRANSACTION = """-- name: get_transaction \\:many
SELECT id, remarks, amount, category FROM transactions
"""


INSERT_TRANSACTION = """-- name: insert_transaction \\:exec
INSERT INTO transactions(id,remarks,amount, category) 
VALUES(:p1,:p2,:p3,:p4)
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_transaction(self) -> Iterator[models.Transaction]:
        result = self._conn.execute(sqlalchemy.text(GET_TRANSACTION))
        for row in result:
            yield models.Transaction(
                id=row[0],
                remarks=row[1],
                amount=row[2],
                category=row[3],
            )

    def insert_transaction(self, *, id: uuid.UUID, remarks: str, amount: decimal.Decimal, category: Optional[str]) -> None:
        self._conn.execute(sqlalchemy.text(INSERT_TRANSACTION), {
            "p1": id,
            "p2": remarks,
            "p3": amount,
            "p4": category,
        })


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_transaction(self) -> AsyncIterator[models.Transaction]:
        result = await self._conn.stream(sqlalchemy.text(GET_TRANSACTION))
        async for row in result:
            yield models.Transaction(
                id=row[0],
                remarks=row[1],
                amount=row[2],
                category=row[3],
            )

    async def insert_transaction(self, *, id: uuid.UUID, remarks: str, amount: decimal.Decimal, category: Optional[str]) -> None:
        await self._conn.execute(sqlalchemy.text(INSERT_TRANSACTION), {
            "p1": id,
            "p2": remarks,
            "p3": amount,
            "p4": category,
        })
